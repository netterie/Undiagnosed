# but data-cleaning has the name hardcoded as msm and I'm not
# going to generalize that right now
setup_hivbackcalc(workd='/Users/jeanette/Dropbox/School/PhD/HIV_WA',
datafile='data/wa_backcalc_data_201506.csv',
source_these='analysis_WA/format_data.R',
package_updated=TRUE)
zeroinf = (dataf$infPeriod==0 & !is.na(dataf$infPeriod))
sum(zeroinf)
library(xtable)
#############################################################
# KNITR
#############################################################
library(knitr)
knit_hooks$set(inline = function(x) {
prettyNum(round(x,2), big.mark=",")
})
# set global chunk options
opts_chunk$set(fig.path='figure/minimal-', fig.align='center',
fig.show='hold', concordance=TRUE, external=TRUE,
tidy=TRUE, size='footnotesize', verbose=TRUE)
options(formatR.arrow=TRUE,width=80,digits=7)
read_chunk(file.path(workd,'analysis_WA/run_main.R'))
#read_chunk(file.path(workd,'analysis_WA/describe_data.R'))
diagInterval = 0.25
TIDs <- estimateTID(dataf$infPeriod, intLength=diagInterval)
plot(TIDs, intLength=diagInterval,
cases = c('Base Case', 'Upper Bound'))
diagCounts = tabulateDiagnoses(KCsim, intLength=diagInterval)
diagCounts = tabulateDiagnoses(dataf, intLength=diagInterval)
incidenceBase = estimateIncidence(y=diagCounts,
pid=TIDs[['base_case']]$pdffxn,
gamma=0.1,
verbose=FALSE)
incidenceUpper = estimateIncidence(y=diagCounts,
pid=TIDs[['upper_bound']]$pdffxn,
gamma=0.1,
verbose=FALSE)
undiagnosedBase <- estimateUndiagnosed(incidenceBase)
undiagnosedUpper <- estimateUndiagnosed(incidenceUpper)
results <- combineResults(list(`Base Case`=list(incidenceBase,
undiagnosedBase),
`Upper Bound`=list(incidenceUpper,
undiagnosedUpper)))
plot(results)
print(xtable(results$resultsSummary,
caption='Observed diagnoses and estimated quarterly incidence and undiagnosed counts over 2005-2014 in WA state',
label='tab:res_main',
digits=0),
caption.placement='top',
table.placement='ht',
size='small',
include.rownames=FALSE)
print(xtable(results$resultsSummary,
caption='Observed diagnoses and estimated quarterly incidence and undiagnosed counts over 2005-2014 in WA state',
label='tab:res_main',
digits=0),
caption.placement='top',
table.placement='ht',
size='small',
include.rownames=FALSE)
source('/Users/jeanette/Dropbox/School/PhD/HIV_WA/HIVBackCalc/R/internal_fxns.R')
plot_qtrDx
4744_432
4744+432
table(dataf$everHadNegTest)
table(dataf$everHadNegTest, useNA='ifany')
basic <- table(dataf$everHadNegTest, useNA='ifany')
basicperc <- basic/sum(basic)
basic
basicperc
basicperc <- 100*basic/sum(basic)
basicperc
basicperc <- round(100*basic/sum(basic),2)
basicperc
basicperc <- round(100*basic/sum(basic),0)
basicperc
variables <- c(`Age Group`='agecat5',
`Race/Ethnicity`='race',
`Mode of Transmission`='mode')
df=dataf
vars <- list(NULL)
v=1
tab <- ddply(df, variables[[v]], function(x, TN=nrow(df)) {
n <- nrow(x)
c(N=n,
`Column Percent`=round(100*n/TN,0),
`Percent Yes`=round(100*sum(x$everHadNegTest, na.rm=TRUE)/n,0),
`Percent No`=round(100*sum(!x$everHadNegTest, na.rm=TRUE)/n,0),
`Percent Missing`=round(100*sum(is.na(x$everHadNegTest))/n,0))
})
tab
vars <- list(NULL)
for (v in 1:length(variables)) {
tab <- ddply(df, variables[[v]], function(x, TN=nrow(df)) {
n <- nrow(x)
c(N=n,
`Column Percent`=round(100*n/TN,0),
`Percent Yes`=round(100*sum(x$everHadNegTest, na.rm=TRUE)/n,0),
`Percent No`=round(100*sum(!x$everHadNegTest, na.rm=TRUE)/n,0),
`Percent Missing`=round(100*sum(is.na(x$everHadNegTest))/n,0))
})
if (supercolumn) {
colnames(tab)[1] <- 'Subgroup'
tab <- data.frame(Characteristic=rep('',nrow(tab)),
tab,
stringsAsFactors=FALSE)
tab$Characteristic[1] <- names(variables)[v]
}
vars[[v]] <- tab
}
supercolumn=TRUE
vars <- list(NULL)
for (v in 1:length(variables)) {
tab <- ddply(df, variables[[v]], function(x, TN=nrow(df)) {
n <- nrow(x)
c(N=n,
`Column Percent`=round(100*n/TN,0),
`Percent Yes`=round(100*sum(x$everHadNegTest, na.rm=TRUE)/n,0),
`Percent No`=round(100*sum(!x$everHadNegTest, na.rm=TRUE)/n,0),
`Percent Missing`=round(100*sum(is.na(x$everHadNegTest))/n,0))
})
if (supercolumn) {
colnames(tab)[1] <- 'Subgroup'
tab <- data.frame(Characteristic=rep('',nrow(tab)),
tab,
stringsAsFactors=FALSE)
tab$Characteristic[1] <- names(variables)[v]
}
vars[[v]] <- tab
}
vars <- do.call(rbind, vars)
vars
rbind(c('All', 'All', nrow(df), 100, 1,1,1))
rbind(c('All', 'All', nrow(df), 100, 1,1,1)), vars)
head()
head(rbind(c('All', 'All', nrow(df), 100, 1,1,1)), vars))
c('All', 'All', nrow(df), 100, 1,1,1))
head(rbind(data.frame('All', 'All', nrow(df), 100, 1,1,1)),
vars))
data.frame('All', 'All', nrow(df), 100, 1,1,1))
vars
fullrow <- data.frame(vars[1,])
fullrow
head(rbind(fullrow,vars))
fullrow[,c((ncol(fullrow)-3):ncol(fullrow))]
fullrow[,c((ncol(fullrow)-4):ncol(fullrow))]
table(df$everHadNegTest)
fulleverHadNegTest <- table(df$everHadNegTest, useNA='ifany')
fulleverHadNegTest
fulleverHadNegTest <- round(100*table(df$everHadNegTest, useNA='ifany'),0)
fulleverHadNegTest <- round(100*table(df$everHadNegTest, useNA='ifany')/nrow(df),0)
fulleverHadNegTest
c(fulleverHadNegTest)
fullrow <- data.frame(vars[1,])
fullrow[,c((ncol(fullrow)-4):ncol(fullrow))] <-
c(nrow(df), 100, c(fullEverHadNegTest))
fulleverHadNegTest <- round(100*table(df$everHadNegTest, useNA='ifany')/nrow(df),0)
fullrow[,c((ncol(fullrow)-4):ncol(fullrow))] <-
c(nrow(df), 100, c(fullEverHadNegTest))
fullrow[,c((ncol(fullrow)-4):ncol(fullrow))] <-
c(nrow(df), 100, c(fulleverHadNegTest))
fullrow
fullrow[,1:(ncol(fullrow)-4)] <- ''
fullrow
fullrow[,1:(ncol(fullrow)-4)] <- rep('All', ncol(fullrow)-4)
fullrow
fullrow[,1:(ncol(fullrow)-4)] <- rep('All', ncol(fullrow)-5)
fullrow[,1:(ncol(fullrow)-4)] <- rep('All', ncol(fullrow)-4)
fullrow
which(colnames(fullrow)=='N')
thiscol <- which(colnames(fullrow)=='N')
thiscol
fullrow[,1:(thiscol-1)] <- rep('All', thiscol-1)
fullrow
fulleverHadNegTest <- round(100*table(df$everHadNegTest, useNA='ifany')/nrow(df),0)
fullrow <- data.frame(vars[1,])
thiscol <- which(colnames(fullrow)=='N')
fullrow[,c((ncol(fullrow)-4):ncol(fullrow))] <-
c(nrow(df), 100, c(fulleverHadNegTest))
fullrow[,1:(thiscol-1)] <- rep('All', thiscol-1)
fullrow
tabulate_everHadNegTest <- function(df, variables, supercolumn=FALSE) {
vars <- list(NULL)
for (v in 1:length(variables)) {
tab <- ddply(df, variables[[v]], function(x, TN=nrow(df)) {
n <- nrow(x)
c(N=n,
`Column Percent`=round(100*n/TN,0),
`Percent Yes`=round(100*sum(x$everHadNegTest, na.rm=TRUE)/n,0),
`Percent No`=round(100*sum(!x$everHadNegTest, na.rm=TRUE)/n,0),
`Percent Missing`=round(100*sum(is.na(x$everHadNegTest))/n,0))
})
if (supercolumn) {
colnames(tab)[1] <- 'Subgroup'
tab <- data.frame(Characteristic=rep('',nrow(tab)),
tab,
stringsAsFactors=FALSE)
tab$Characteristic[1] <- names(variables)[v]
}
vars[[v]] <- tab
}
vars <- do.call(rbind, vars)
# Now add a row for the full sample
fulleverHadNegTest <- round(100*table(df$everHadNegTest, useNA='ifany')/nrow(df),0)
fullrow <- data.frame(vars[1,])
thiscol <- which(colnames(fullrow)=='N')
fullrow[,c((ncol(fullrow)-4):ncol(fullrow))] <-
c(nrow(df), 100, c(fulleverHadNegTest))
fullrow[,1:(thiscol-1)] <- rep('All', thiscol-1)
return(vars)
}
everHadNegTest_subgrouptab <- tabulate_everHadNegTest(dataf,
variables,
supercolumn=TRUE)
everHadNegTest_subgrouptab
rbind(fullrow, vars)
vars <- rbind(fullrow, vars)
tabulate_everHadNegTest <- function(df, variables, supercolumn=FALSE) {
vars <- list(NULL)
for (v in 1:length(variables)) {
tab <- ddply(df, variables[[v]], function(x, TN=nrow(df)) {
n <- nrow(x)
c(N=n,
`Column Percent`=round(100*n/TN,0),
`Percent Yes`=round(100*sum(x$everHadNegTest, na.rm=TRUE)/n,0),
`Percent No`=round(100*sum(!x$everHadNegTest, na.rm=TRUE)/n,0),
`Percent Missing`=round(100*sum(is.na(x$everHadNegTest))/n,0))
})
if (supercolumn) {
colnames(tab)[1] <- 'Subgroup'
tab <- data.frame(Characteristic=rep('',nrow(tab)),
tab,
stringsAsFactors=FALSE)
tab$Characteristic[1] <- names(variables)[v]
}
vars[[v]] <- tab
}
vars <- do.call(rbind, vars)
# Now add a row for the full sample
fulleverHadNegTest <- round(100*table(df$everHadNegTest, useNA='ifany')/nrow(df),0)
fullrow <- data.frame(vars[1,])
thiscol <- which(colnames(fullrow)=='N')
fullrow[,c((ncol(fullrow)-4):ncol(fullrow))] <-
c(nrow(df), 100, c(fulleverHadNegTest))
fullrow[,1:(thiscol-1)] <- rep('All', thiscol-1)
vars <- rbind(fullrow, vars)
return(vars)
}
everHadNegTest_subgrouptab <- tabulate_everHadNegTest(dataf,
variables,
supercolumn=TRUE)
everHadNegTest_subgrouptab
everHadNegTest_racebydx <- tabulate_everHadNegTest(dataf,
list(c('mode', 'race')))
everHadNegTest_racebydx <- tabulate_everHadNegTest(dataf,
list(c('mode', 'race')))
q()
vars <- list(NULL)
variables = list(c('mode', 'race'))
length(variables)
supercolumn=FALSE
tab <- ddply(df, variables[[v]], function(x, TN=nrow(df)) {
n <- nrow(x)
c(N=n,
`Column Percent`=round(100*n/TN,0),
`Percent Yes`=round(100*sum(x$everHadNegTest, na.rm=TRUE)/n,0),
`Percent No`=round(100*sum(!x$everHadNegTest, na.rm=TRUE)/n,0),
`Percent Missing`=round(100*sum(is.na(x$everHadNegTest))/n,0))
})
v=1
tab <- ddply(df, variables[[v]], function(x, TN=nrow(df)) {
n <- nrow(x)
c(N=n,
`Column Percent`=round(100*n/TN,0),
`Percent Yes`=round(100*sum(x$everHadNegTest, na.rm=TRUE)/n,0),
`Percent No`=round(100*sum(!x$everHadNegTest, na.rm=TRUE)/n,0),
`Percent Missing`=round(100*sum(is.na(x$everHadNegTest))/n,0))
})
tab
vars[[v]] <- tab
vars <- do.call(rbind, vars)
vars
fulleverHadNegTest <- round(100*table(df$everHadNegTest, useNA='ifany')/nrow(df),0)
fullrow <- data.frame(vars[1,])
fullrow
thiscol <- which(colnames(fullrow)=='N')
fullrow[,c((ncol(fullrow)-4):ncol(fullrow))] <-
c(nrow(df), 100, c(fulleverHadNegTest))
fullrow[,1:(thiscol-1)] <- rep('All', thiscol-1)
fullrow
vars <- rbind(fullrow, vars)
fullrow
vars
colnames(fullrow) <- colnames(vars)
vars <- rbind(fullrow, vars)
vars
fulleverHadNegTest <- round(100*table(df$everHadNegTest, useNA='ifany')/nrow(df),0)
fullrow <- data.frame(vars[1,])
thiscol <- which(colnames(fullrow)=='N')
fullrow
fullrow <- data.frame(vars[1,])
fullrow
vars <- list(NULL)
for (v in 1:length(variables)) {
tab <- ddply(df, variables[[v]], function(x, TN=nrow(df)) {
n <- nrow(x)
c(N=n,
`Column Percent`=round(100*n/TN,0),
`Percent Yes`=round(100*sum(x$everHadNegTest, na.rm=TRUE)/n,0),
`Percent No`=round(100*sum(!x$everHadNegTest, na.rm=TRUE)/n,0),
`Percent Missing`=round(100*sum(is.na(x$everHadNegTest))/n,0))
})
if (supercolumn) {
colnames(tab)[1] <- 'Subgroup'
tab <- data.frame(Characteristic=rep('',nrow(tab)),
tab,
stringsAsFactors=FALSE)
tab$Characteristic[1] <- names(variables)[v]
}
vars[[v]] <- tab
}
vars <- do.call(rbind, vars)
vars
head(vars)
fulleverHadNegTest <- round(100*table(df$everHadNegTest, useNA='ifany')/nrow(df),0)
fullrow <- data.frame(vars[1,])
thiscol <- which(colnames(fullrow)=='N')
thiscol
fullrow
fulleverHadNegTest
fulleverHadNegTest['TRUE']
fulleverHadNegTest['<NA>']
fulleverHadNegTest[<NA>]
fulleverHadNegTest['NA']
c(nrow(df),
100,
fulleverHadNegTest['TRUE'],
fulleverHadNegTest['TRUE'],
100-fulleverHadNegTest['TRUE']-fulleverHadNegTest['FALSE'])
c(nrow(df),
100,
fulleverHadNegTest['TRUE'],
fulleverHadNegTest['FALSE'],
100-fulleverHadNegTest['TRUE']-fulleverHadNegTest['FALSE'])
fullrow[,c((ncol(fullrow)-4):ncol(fullrow))] <-
c(nrow(df),
100,
fulleverHadNegTest['TRUE'],
fulleverHadNegTest['FALSE'],
100-fulleverHadNegTest['TRUE']-fulleverHadNegTest['FALSE'])
fullrow[,1:(thiscol-1)] <- rep('All', thiscol-1)
colnames(fullrow) <- colnames(vars)
fullrow
rsconnect::setAccountInfo(name='jeanettekb', token='8183D498822B80D2215E863183B870AB', secret='jy3wWy8hzRRaOsI8AU6wY93d6LIowmJS6jzdAmXI')
39.8*5
199-77.6
source('~/Dropbox/School/PhD/HIV_WA/analysis_WA/2016_CD4Case.R', echo=TRUE)
plot.BC(2,xmax = 5,ymax = 1.5,t = 'Window  =  2 years',shading = 1,extra.ticks = 1:5)
head(dataf)
BEDlabels <- c('Long-standing infection', 'Recent infection',
'Other/unknown')
dataf <- within(dataf, {
est_infect_period=factor(est_infect_period,
levels=1:3,
labels=BEDlabels)
BED=factor(est_infect_period,
levels=BEDlabels,
labels=c('-','+','Miss'))
BED2=paste('BED', BED)
BED2fac=factor(BED2, levels=c('BED +', 'BED -', 'BED Miss'),
labels=c('BED +', 'BED -', 'BED Miss'))
})
table(dataf$BED2)
table(dataf$everHad)
BEDlabels <- c('Long-standing infection', 'Recent infection',
'Other/unknown')
dataf <- within(dataf, {
est_infect_period=factor(est_infect_period,
levels=1:3,
labels=BEDlabels)
BED=factor(est_infect_period,
levels=BEDlabels,
labels=c('-','+','Miss'))
BED2=paste('BED', BED)
BED2fac=factor(BED2, levels=c('BED +', 'BED -', 'BED Miss'),
labels=c('BED +', 'BED -', 'BED Miss'))
everHad2=ifelse(everHad=='Missing', 'TH Missing', 'TH Non-Missing')
})
ddply(dataf, .(everHad2, cd4within30), summarize,
percBEDpos = 100*sum(BED2fact=='BED +')/nrow(x),
meanCD4 = mean(firstcd4cnt, na.rm=TRUE),
medCD4 = median(firstcd4cnt, na.rm=TRUE),
percConcurrent = 100*mean(aidsAtDx2, na.rm=TRUE)
)
colnames(dataf)
ddply(dataf, .(everHad2, cd4within30), summarize,
percBEDpos = 100*sum(BED2fact=='BED +')/length(BED2fact),
meanCD4 = mean(firstcd4cnt, na.rm=TRUE),
medCD4 = median(firstcd4cnt, na.rm=TRUE),
percConcurrent = 100*mean(aidsAtDx2, na.rm=TRUE)
)
ddply(dataf, .(everHad2, cd4within30), summarise,
percBEDpos = 100*sum(BED2fact=='BED +')/length(BED2fact),
meanCD4 = mean(firstcd4cnt, na.rm=TRUE),
medCD4 = median(firstcd4cnt, na.rm=TRUE),
percConcurrent = 100*mean(aidsAtDx2, na.rm=TRUE)
)
ddply(dataf, .(everHad2, cd4within30), summarise,
percBEDpos = 100*sum(BED2fac=='BED +')/length(BED2fac),
meanCD4 = mean(firstcd4cnt, na.rm=TRUE),
medCD4 = median(firstcd4cnt, na.rm=TRUE),
percConcurrent = 100*mean(aidsAtDx2, na.rm=TRUE)
)
str(dataf$aidsAtDx2)
str(dataf@aidsAtDx)
ddply(dataf, .(everHad2, cd4within30), summarise,
percBEDpos = 100*sum(BED2fac=='BED +')/length(BED2fac),
meanCD4 = mean(firstcd4cnt, na.rm=TRUE),
medCD4 = median(firstcd4cnt, na.rm=TRUE),
percConcurrent = 100*sum(aidsAtDx2=='Concurrent Dx')/
length(aidsAtDx2)
)
missAtRand <- ddply(dataf, .(everHad2, cd4within30), summarise,
percBEDpos = 100*sum(BED2fac=='BED +')/length(BED2fac),
meanCD4 = mean(firstcd4cnt, na.rm=TRUE),
medCD4 = median(firstcd4cnt, na.rm=TRUE),
percConcurrent = 100*sum(aidsAtDx2=='Concurrent Dx')/
length(aidsAtDx2)
)
missAtRand <- missAtRand[2:3,]
missAtRand
missAtRand
missAtRand <- ddply(dataf, .(everHad2, cd4within30), summarise,
percBEDpos = 100*sum(BED2fac=='BED +')/length(BED2fac),
meanCD4 = mean(firstcd4cnt, na.rm=TRUE),
medCD4 = median(firstcd4cnt, na.rm=TRUE),
percConcurrent = 100*sum(aidsAtDx2=='Concurrent Dx')/
length(aidsAtDx2)
)
missAtRand
dim(dataf)
BEDlabels <- c('Long-standing infection', 'Recent infection',
'Other/unknown')
dataf <- within(dataf, {
est_infect_period=factor(est_infect_period,
levels=1:3,
labels=BEDlabels)
BED=factor(est_infect_period,
levels=BEDlabels,
labels=c('-','+','Miss'))
BED2=paste('BED', BED)
BED2fac=factor(BED2, levels=c('BED +', 'BED -', 'BED Miss'),
labels=c('BED +', 'BED -', 'BED Miss'))
everHad2=ifelse(everHad=='Missing', 'TH Missing', 'TH Non-Missing')
cd4within302=ifelse(!is.na(firstcd4cnt) & !is.na(cd4_days) &
cd4_days<=30, TRUE, FALSE)
})
missAtRand <- ddply(dataf, .(everHad2, cd4within302), summarise,
percBEDpos = 100*sum(BED2fac=='BED +')/length(BED2fac),
meanCD4 = mean(firstcd4cnt, na.rm=TRUE),
medCD4 = median(firstcd4cnt, na.rm=TRUE),
percConcurrent = 100*sum(aidsAtDx2=='Concurrent Dx')/
length(aidsAtDx2)
)
missAtRand
missAtRand <- subset(missAtRand, cd4with302=TRUE)
missAtRand
missAtRand <- subset(missAtRand, cd4with302==TRUE)
missAtRand <- subset(missAtRand, cd4within302==TRUE)
missAtRand
missLong <- melt(missAtRand)
missAtRand
t(missAtRand)
missLong <- t(missAtRand[,2:5])
missLong
missLong <- t(missAtRand[,3:6])
missLong
with(dataf, sum(BED2fac=='BED +'))
with(dataf, sum(BED2fac=='BED +', na.rm=TRUE))
table(dataf$BED2fac)
table(dataf$est_infect_period)
source('~/Dropbox/School/PhD/HIV_WA/analysis_WA/2016_CD4Case.R', echo=TRUE)
bcVbcalt
plot(bcVbcalt)
plot(bcVbcalt, 0.25)
library(HIVBackCacl)
library(HIVBackCalck)
library(HIVBackCalc)
plot(bcVbcalt, 0.25)
missAtRand
missLong <- t(missAtRand[,3:6])
missLong
rownames(missAtRand) <- missAtRand$everHad2
missLong <- t(missAtRand[,3:6])
missLong
rownames(missAtRand) <- gsub('TH', '', missAtRand$everHad2)
missAtRand
missLong <- t(missAtRand[,3:6])
missLong
'Percent with Concurrent Dx')
missAtRand <- subset(missAtRand, cd4within302==TRUE)
rownames(missAtRand) <- gsub('TH', '', missAtRand$everHad2)
missLong <- t(missAtRand[,3:6])
rownames(missLong) <- c('Percent BED +', 'Mean CD4', 'Median CD4',
'Percent with Concurrent Dx')
missLong <- missLong[,2:1]
missLong
table(dataf$cd4within302)
3589/nrow(dataf)
cd4not30Plot
rm(list=ls())
source('~/Dropbox/School/PhD/HIV_WA/analysis_WA/2016_CD4Case.R', echo=TRUE)
